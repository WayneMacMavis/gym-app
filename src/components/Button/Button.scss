@use "../../styles/variables" as *;

.btn {
  border: none;
  border-radius: $radius-md;
  cursor: pointer;
  font-weight: 500;
  text-align: center;
  transition: all 0.15s ease;
  color: white;
  box-shadow: 0 3px 6px rgba(0,0,0,0.2);

  &:active {
    transform: translateY(2px);
    box-shadow: 0 1px 3px rgba(0,0,0,0.2);
  }

  &-primary {
    background: $color-primary;
    padding: $spacing-md $spacing-lg;
    font-size: $font-size-base;

    &:hover { background: $color-primary-hover; }
  }

  &-success {
    background: $color-success;
    padding: 0.4rem 0.6rem;
    font-size: $font-size-small;

    &:hover { background: darken($color-success, 5%); }
  }

  /* ðŸ”§ Updated: variable-based size + flex-shrink fix + progress ring */
  &-danger {
    --danger-btn-size: 44px; // default size, can override per context

    background: $color-danger;
    width: var(--danger-btn-size);
    height: var(--danger-btn-size);
    min-width: var(--danger-btn-size);
    min-height: var(--danger-btn-size);
    max-width: var(--danger-btn-size);
    max-height: var(--danger-btn-size);
    flex-shrink: 0;              // ðŸ‘ˆ prevent flexbox from squashing
    border-radius: 50%;
    font-size: 1rem;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;          // needed for ring positioning

    &:hover { background: $color-danger-hover; }

    /* Progress ring */
    .progress-ring {
      position: absolute;
      top: 0;
      left: 0;
      width: var(--danger-btn-size);
      height: var(--danger-btn-size);
      transform: rotate(-90deg); // start at top
      pointer-events: none;
    }

    .progress-ring__circle {
      fill: none;
      stroke: $color-success;
      stroke-width: 3;
      stroke-linecap: round;

      /* Circle radius = half size - stroke */
      r: calc(var(--danger-btn-size) / 2 - 2px);
      cx: calc(var(--danger-btn-size) / 2);
      cy: calc(var(--danger-btn-size) / 2);

      stroke-dasharray: calc(2 * 3.1416 * (var(--danger-btn-size) / 2 - 2px));
      stroke-dashoffset: calc(
        (1 - var(--progress, 0)) *
          (2 * 3.1416 * (var(--danger-btn-size) / 2 - 2px))
      );

      transition: stroke-dashoffset 0.05s linear;
    }
  }

  &-secondary {
    background: $color-gray-light;
    padding: $spacing-md $spacing-lg;
    font-size: $font-size-base;

    &:hover { background: $color-gray-light-hover; }
  }
}

/* Lifted button effect (applies to all .btn) */
.btn {
  box-shadow: 0 3px 6px rgba(0,0,0,0.2);
  transition: all 0.15s ease;

  &:active {
    transform: translateY(2px);
    box-shadow: 0 1px 3px rgba(0,0,0,0.2);
  }
}

/* Shake animation for NumberAdjuster arrows */
@keyframes shake {
  0%   { transform: translateX(0); }
  25%  { transform: translateX(-3px); }
  50%  { transform: translateX(3px); }
  75%  { transform: translateX(-3px); }
  100% { transform: translateX(0); }
}

.arrow.shake {
  animation: shake 0.3s;
}
